{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _Map from \"@babel/runtime-corejs2/core-js/map\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport { useEffect, useMemo, useRef, useState } from 'react';\nexport default function createHook(useHook) {\n  for (var _len = arguments.length, initialArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    initialArgs[_key - 1] = arguments[_key];\n  }\n\n  return createHookWithClass.apply(void 0, [Hookleton, useHook].concat(initialArgs));\n}\nexport function createHookWithClass(hookletonClass, useHook) {\n  for (var _len2 = arguments.length, initialArgs = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n    initialArgs[_key2 - 2] = arguments[_key2];\n  }\n\n  var hook = new hookletonClass(useHook, initialArgs);\n  var useFn = hook.useFn.bind(hook);\n  useFn.get = hook._get.bind(hook);\n  return useFn;\n}\nexport var Hookleton =\n/*#__PURE__*/\nfunction () {\n  function Hookleton(useHook, initialArgs) {\n    _classCallCheck(this, Hookleton);\n\n    this._useHook = useHook;\n    this._args = initialArgs;\n    this._hookOut = [];\n    this._updaters = new _Map();\n  }\n\n  _createClass(Hookleton, [{\n    key: \"useFn\",\n    value: function useFn() {\n      var _this = this;\n\n      for (var _len3 = arguments.length, initialArgs = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        initialArgs[_key3] = arguments[_key3];\n      }\n\n      // First hook call become the 'hookleton'\n      var isFirst = useRef(false);\n      useMemo(function () {\n        return _this._onInit({\n          isFirst: isFirst,\n          initialArgs: initialArgs\n        });\n      }, []); // only one `useFn` instance will be true\n\n      if (isFirst.current) {\n        // Set shared `hook` output\n        this._hookOut = this._useHook.apply(this, _toConsumableArray(this._args)); // Checked at start on 'first' render\n\n        useMemo(function () {\n          if (!_Array$isArray(_this._hookOut)) {\n            throw new Error(\"[Hookleton] provided 'useHook' must return array values\");\n          }\n        }, []); // prevent Exception on 'hookleton' unmount\n        // by **CONVENTION** updater is `hookOut[1]\n\n        useEffect(function () {\n          return function () {\n            return _this._hookOut[1] = _this._unmountedFirst;\n          };\n        }, []); // Lifecycle hook: `on render first`\n\n        return this.useOnFirst(this._args);\n      } // Lifecycle hook: `on render the rest`\n\n\n      return this.useOnRest(initialArgs);\n    } // Here we use a custom function that ignore first render call.\n\n  }, {\n    key: \"useOnFirst\",\n    value: function useOnFirst() {\n      useEffect(this.__updateRest.bind(this), [this._hookOut[0]]);\n      return this._hookOut;\n    }\n  }, {\n    key: \"useOnRest\",\n    value: function useOnRest() {\n      var _this2 = this;\n\n      // Get 'updater' for, later, force render it.\n      // state is ignore because we have only one state set in 'hookleton'\n      var _useState = useState(),\n          _useState2 = _slicedToArray(_useState, 2),\n          updater = _useState2[1];\n\n      useEffect(function () {\n        // a Map of key/value: updater/updater is useful for some kinds of hooks\n        // composed on top of `useFn`\n        _this2._updaters.set(updater, wrapUpdater(updater));\n\n        return function () {\n          return _this2._updaters.delete(updater);\n        }; // on unmount\n      }, []);\n      return this._hookOut;\n    }\n  }, {\n    key: \"_onInit\",\n    value: function _onInit(_ref) {\n      var isFirst = _ref.isFirst,\n          initialArgs = _ref.initialArgs;\n\n      this._onInit = function () {}; // on Init only\n\n\n      isFirst.current = true; // Passed arguments on `useFn` declaration have more priority than args from first `useFn` call\n\n      this._args = this._args.length > 0 ? this._args : initialArgs;\n    }\n  }, {\n    key: \"_updateRest\",\n    value: function _updateRest() {\n      var _this3 = this;\n\n      // State, `hookOut[0]`, is passed to updater. This value is not use here,\n      // but could be useful for libs that extends Hookleton\n      this._updaters.forEach(function (updater) {\n        return updater(_this3._hookOut[0]);\n      });\n    }\n  }, {\n    key: \"__updateRest\",\n    value: function __updateRest() {\n      // skip first(unexpected) callback call\n      this.__updateRest = this._updateRest;\n    }\n  }, {\n    key: \"_get\",\n    value: function _get() {\n      return this._hookOut;\n    } // Prevent a Exception get throwed when someone is trying to update a unmounted 'hookleton',\n\n  }, {\n    key: \"_unmountedFirst\",\n    value: function _unmountedFirst() {\n      console.warn(\"[Hookleton] 'first' was unmounted\");\n    }\n  }]);\n\n  return Hookleton;\n}(); // Update negating '~' his current state. This force to rerender it\n\nvar wrapUpdater = function wrapUpdater(updater) {\n  return function () {\n    return updater(forceUpdate);\n  };\n};\n\nvar forceUpdate = function forceUpdate(s) {\n  return ~s;\n};","map":{"version":3,"sources":["/Users/flx/Dropbox/Projects/hookleton/example/component/index.js"],"names":["useEffect","useMemo","useRef","useState","createHook","useHook","initialArgs","createHookWithClass","Hookleton","hookletonClass","hook","useFn","bind","get","_get","_useHook","_args","_hookOut","_updaters","isFirst","_onInit","current","Error","_unmountedFirst","useOnFirst","useOnRest","__updateRest","updater","set","wrapUpdater","delete","length","forEach","_updateRest","console","warn","forceUpdate","s"],"mappings":"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","sourcesContent":["import { useEffect, useMemo, useRef, useState } from 'react';\n\nexport default function createHook(useHook, ...initialArgs) {\n  return createHookWithClass(Hookleton, useHook, ...initialArgs);\n}\n\nexport function createHookWithClass(hookletonClass, useHook, ...initialArgs) {\n  const hook = new hookletonClass(useHook, initialArgs);\n  const useFn = hook.useFn.bind(hook);\n  useFn.get = hook._get.bind(hook);\n  return useFn;\n}\n\nexport class Hookleton {\n  constructor(useHook, initialArgs) {\n    this._useHook = useHook;\n    this._args = initialArgs;\n\n    this._hookOut = [];\n    this._updaters = new Map();\n  }\n\n  useFn(...initialArgs) {\n    // First hook call become the 'hookleton'\n    const isFirst = useRef(false);\n    useMemo(() => this._onInit({ isFirst, initialArgs }), []); // only one `useFn` instance will be true\n\n    if (isFirst.current) {\n      // Set shared `hook` output\n      this._hookOut = this._useHook(...this._args);\n\n      // Checked at start on 'first' render\n      useMemo(() => {\n        if (!Array.isArray(this._hookOut)) {\n          throw new Error(\"[Hookleton] provided 'useHook' must return array values\");\n        }\n      }, []);\n\n      // prevent Exception on 'hookleton' unmount\n      // by **CONVENTION** updater is `hookOut[1]\n      useEffect(() => () => (this._hookOut[1] = this._unmountedFirst), []);\n\n      // Lifecycle hook: `on render first`\n      return this.useOnFirst(this._args);\n    }\n\n    // Lifecycle hook: `on render the rest`\n    return this.useOnRest(initialArgs);\n  }\n\n  // Here we use a custom function that ignore first render call.\n  useOnFirst() {\n    useEffect(this.__updateRest.bind(this), [this._hookOut[0]]);\n    return this._hookOut;\n  }\n\n  useOnRest() {\n    // Get 'updater' for, later, force render it.\n    // state is ignore because we have only one state set in 'hookleton'\n    const [, updater] = useState();\n\n    useEffect(() => {\n      // a Map of key/value: updater/updater is useful for some kinds of hooks\n      // composed on top of `useFn`\n      this._updaters.set(updater, wrapUpdater(updater));\n      return () => this._updaters.delete(updater); // on unmount\n    }, []);\n\n    return this._hookOut;\n  }\n\n  _onInit({ isFirst, initialArgs }) {\n    this._onInit = () => {};\n    // on Init only\n    isFirst.current = true;\n    // Passed arguments on `useFn` declaration have more priority than args from first `useFn` call\n    this._args = this._args.length > 0 ? this._args : initialArgs;\n  }\n\n  _updateRest() {\n    // State, `hookOut[0]`, is passed to updater. This value is not use here,\n    // but could be useful for libs that extends Hookleton\n    this._updaters.forEach(updater => updater(this._hookOut[0]));\n  }\n\n  __updateRest() {\n    // skip first(unexpected) callback call\n    this.__updateRest = this._updateRest;\n  }\n\n  _get() {\n    return this._hookOut;\n  }\n\n  // Prevent a Exception get throwed when someone is trying to update a unmounted 'hookleton',\n  _unmountedFirst() {\n    console.warn(\"[Hookleton] 'first' was unmounted\");\n  }\n}\n\n// Update negating '~' his current state. This force to rerender it\nconst wrapUpdater = updater => () => updater(forceUpdate);\nconst forceUpdate = s => ~s;\n"]},"metadata":{},"sourceType":"module"}