{"ast":null,"code":"import _typeof from \"@babel/runtime-corejs2/helpers/esm/typeof\";\nimport _get from \"@babel/runtime-corejs2/helpers/esm/get\";\nimport _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport { useState, useEffect, useRef, useMemo } from 'react';\nimport { Hookleton, createHookWithClass } from './index';\nexport default function createHook(useHook) {\n  for (var _len = arguments.length, initialArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    initialArgs[_key - 1] = arguments[_key];\n  }\n\n  //return createHookWithClass(Predicate, useHook, ...initialArgs);\n  var hook = new Predicate(useHook, initialArgs);\n  var useFn = hook.useFn.bind(hook);\n  useFn.get = hook._get.bind(hook);\n  return useFn;\n}\nexport function createHookWithPredicateCore(useHook) {\n  for (var _len2 = arguments.length, initialArgs = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    initialArgs[_key2 - 1] = arguments[_key2];\n  }\n\n  return createHookWithClass.apply(void 0, [PredicateCore, useHook].concat(initialArgs));\n}\nexport var PredicateCore =\n/*#__PURE__*/\nfunction (_Hookleton) {\n  _inherits(PredicateCore, _Hookleton);\n\n  function PredicateCore() {\n    _classCallCheck(this, PredicateCore);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(PredicateCore).apply(this, arguments));\n  }\n\n  _createClass(PredicateCore, [{\n    key: \"useOnRest\",\n    value: function useOnRest(_ref) {\n      var _this = this;\n\n      var _ref2 = _slicedToArray(_ref, 1),\n          arg1 = _ref2[0];\n\n      var predicate;\n      var hasSet = useRef(false);\n      useMemo(function () {\n        if (_Array$isArray(arg1)) {\n          hasSet.current = true;\n          predicate = arg1[0];\n        } else {\n          predicate = arg1;\n        }\n      }, []);\n\n      var _useState = useState(),\n          _useState2 = _slicedToArray(_useState, 2),\n          updater = _useState2[1];\n\n      useEffect(function () {\n        _this._saveUpdater(updater, predicate);\n\n        return function () {\n          return _this._updaters.delete(updater);\n        }; // on unmount\n      }, []);\n      return hasSet.current ? this._hookOut.concat({\n        setPredicate: this._setPredicate(updater)\n      }) : this._hookOut;\n    }\n  }, {\n    key: \"_saveUpdater\",\n    value: function _saveUpdater(updater, predicate) {\n      this._updaters.set(updater, withPredicate(updater, predicate));\n    }\n  }, {\n    key: \"_setPredicate\",\n    value: function _setPredicate(updater) {\n      var _this2 = this;\n\n      return function (predicate) {\n        _this2._saveUpdater(updater, predicate);\n\n        _this2._updaters.get(updater)(_this2._hookOut[0]);\n      };\n    }\n  }]);\n\n  return PredicateCore;\n}(Hookleton);\nexport var Predicate =\n/*#__PURE__*/\nfunction (_PredicateCore) {\n  _inherits(Predicate, _PredicateCore);\n\n  function Predicate() {\n    _classCallCheck(this, Predicate);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Predicate).apply(this, arguments));\n  }\n\n  _createClass(Predicate, [{\n    key: \"useOnFirst\",\n    value: function useOnFirst(initial) {\n      return _get(_getPrototypeOf(Predicate.prototype), \"useOnFirst\", this).call(this, initial).concat({\n        isFirst: true,\n        setPredicate: setPredicate\n      });\n    }\n  }, {\n    key: \"useOnRest\",\n    value: function useOnRest(initial) {\n      var hookOut = _get(_getPrototypeOf(Predicate.prototype), \"useOnRest\", this).call(this, initial);\n\n      var len = hookOut.length;\n\n      if (len === this.hookOut.length) {\n        hookOut = hookOut.concat({\n          isFirst: false,\n          setPredicate: setPredicate\n        });\n      } else {\n        hookOut[len - 1].isFirst = false;\n      }\n\n      return hookOut;\n    }\n  }]);\n\n  return Predicate;\n}(PredicateCore);\n\nvar setPredicate = function setPredicate() {}; // Add 'predicate' function to updater\n\n\nfunction withPredicate(updater, p) {\n  var predicate = normalize(p);\n  return function (s) {\n    return predicate(s) && updater(forceUpdate);\n  };\n}\n\nvar forceUpdate = function forceUpdate(s) {\n  return ~s;\n};\n\nfunction normalize(p) {\n  switch (_typeof(p)) {\n    case 'undefined':\n      return TRUEFN;\n\n    case 'function':\n      return p;\n\n    case 'boolean':\n      return function () {\n        return p;\n      };\n\n    default:\n      console.warn(\"[Hookleton] predicate '\" + p + \"' is not boolean or function\");\n      return FALSEFN;\n  }\n}\n\nvar TRUEFN = function TRUEFN() {\n  return true;\n};\n\nvar FALSEFN = function FALSEFN() {\n  return false;\n};","map":{"version":3,"sources":["/Users/flx/Dropbox/Projects/hookleton/example/component/index-predicate.js"],"names":["useState","useEffect","useRef","useMemo","Hookleton","createHookWithClass","createHook","useHook","initialArgs","hook","Predicate","useFn","bind","get","_get","createHookWithPredicateCore","PredicateCore","arg1","predicate","hasSet","current","updater","_saveUpdater","_updaters","delete","_hookOut","concat","setPredicate","_setPredicate","set","withPredicate","initial","isFirst","hookOut","len","length","p","normalize","s","forceUpdate","TRUEFN","console","warn","FALSEFN"],"mappings":";;;;;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,EAAsCC,OAAtC,QAAqD,OAArD;AACA,SAASC,SAAT,EAAoBC,mBAApB,QAA+C,SAA/C;AAEA,eAAe,SAASC,UAAT,CAAoBC,OAApB,EAA6C;AAAA,oCAAbC,WAAa;AAAbA,IAAAA,WAAa;AAAA;;AAC1D;AACA,MAAMC,IAAI,GAAG,IAAIC,SAAJ,CAAcH,OAAd,EAAuBC,WAAvB,CAAb;AACA,MAAMG,KAAK,GAAGF,IAAI,CAACE,KAAL,CAAWC,IAAX,CAAgBH,IAAhB,CAAd;AACAE,EAAAA,KAAK,CAACE,GAAN,GAAYJ,IAAI,CAACK,IAAL,CAAUF,IAAV,CAAeH,IAAf,CAAZ;AACA,SAAOE,KAAP;AACD;AAED,OAAO,SAASI,2BAAT,CAAqCR,OAArC,EAA8D;AAAA,qCAAbC,WAAa;AAAbA,IAAAA,WAAa;AAAA;;AACnE,SAAOH,mBAAmB,MAAnB,UAAoBW,aAApB,EAAmCT,OAAnC,SAA+CC,WAA/C,EAAP;AACD;AAED,WAAaQ,aAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,oCACoB;AAAA;;AAAA;AAAA,UAAPC,IAAO;;AAChB,UAAIC,SAAJ;AACA,UAAMC,MAAM,GAAGjB,MAAM,CAAC,KAAD,CAArB;AACAC,MAAAA,OAAO,CAAC,YAAM;AACZ,YAAI,eAAcc,IAAd,CAAJ,EAAyB;AACvBE,UAAAA,MAAM,CAACC,OAAP,GAAiB,IAAjB;AACAF,UAAAA,SAAS,GAAGD,IAAI,CAAC,CAAD,CAAhB;AACD,SAHD,MAGO;AACLC,UAAAA,SAAS,GAAGD,IAAZ;AACD;AACF,OAPM,EAOJ,EAPI,CAAP;;AAHgB,sBAYIjB,QAAQ,EAZZ;AAAA;AAAA,UAYPqB,OAZO;;AAchBpB,MAAAA,SAAS,CAAC,YAAM;AACd,QAAA,KAAI,CAACqB,YAAL,CAAkBD,OAAlB,EAA2BH,SAA3B;;AACA,eAAO;AAAA,iBAAM,KAAI,CAACK,SAAL,CAAeC,MAAf,CAAsBH,OAAtB,CAAN;AAAA,SAAP,CAFc,CAE+B;AAC9C,OAHQ,EAGN,EAHM,CAAT;AAKA,aAAOF,MAAM,CAACC,OAAP,GACH,KAAKK,QAAL,CAAcC,MAAd,CAAqB;AAAEC,QAAAA,YAAY,EAAE,KAAKC,aAAL,CAAmBP,OAAnB;AAAhB,OAArB,CADG,GAEH,KAAKI,QAFT;AAGD;AAvBH;AAAA;AAAA,iCAyBeJ,OAzBf,EAyBwBH,SAzBxB,EAyBmC;AAC/B,WAAKK,SAAL,CAAeM,GAAf,CAAmBR,OAAnB,EAA4BS,aAAa,CAACT,OAAD,EAAUH,SAAV,CAAzC;AACD;AA3BH;AAAA;AAAA,kCA6BgBG,OA7BhB,EA6ByB;AAAA;;AACrB,aAAO,UAAAH,SAAS,EAAI;AAClB,QAAA,MAAI,CAACI,YAAL,CAAkBD,OAAlB,EAA2BH,SAA3B;;AACA,QAAA,MAAI,CAACK,SAAL,CAAeV,GAAf,CAAmBQ,OAAnB,EAA4B,MAAI,CAACI,QAAL,CAAc,CAAd,CAA5B;AACD,OAHD;AAID;AAlCH;;AAAA;AAAA,EAAmCrB,SAAnC;AAqCA,WAAaM,SAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,+BACaqB,OADb,EACsB;AAClB,aAAO,0EAAiBA,OAAjB,EAA0BL,MAA1B,CAAiC;AAAEM,QAAAA,OAAO,EAAE,IAAX;AAAiBL,QAAAA,YAAY,EAAZA;AAAjB,OAAjC,CAAP;AACD;AAHH;AAAA;AAAA,8BAKYI,OALZ,EAKqB;AACjB,UAAIE,OAAO,4EAAmBF,OAAnB,CAAX;;AACA,UAAMG,GAAG,GAAGD,OAAO,CAACE,MAApB;;AACA,UAAID,GAAG,KAAK,KAAKD,OAAL,CAAaE,MAAzB,EAAiC;AAC/BF,QAAAA,OAAO,GAAGA,OAAO,CAACP,MAAR,CAAe;AAAEM,UAAAA,OAAO,EAAE,KAAX;AAAkBL,UAAAA,YAAY,EAAZA;AAAlB,SAAf,CAAV;AACD,OAFD,MAEO;AACLM,QAAAA,OAAO,CAACC,GAAG,GAAG,CAAP,CAAP,CAAiBF,OAAjB,GAA2B,KAA3B;AACD;;AACD,aAAOC,OAAP;AACD;AAdH;;AAAA;AAAA,EAA+BjB,aAA/B;;AAiBA,IAAMW,YAAY,GAAG,SAAfA,YAAe,GAAM,CAAE,CAA7B,C,CAEA;;;AACA,SAASG,aAAT,CAAuBT,OAAvB,EAAgCe,CAAhC,EAAmC;AACjC,MAAMlB,SAAS,GAAGmB,SAAS,CAACD,CAAD,CAA3B;AACA,SAAO,UAAAE,CAAC;AAAA,WAAIpB,SAAS,CAACoB,CAAD,CAAT,IAAgBjB,OAAO,CAACkB,WAAD,CAA3B;AAAA,GAAR;AACD;;AAED,IAAMA,WAAW,GAAG,SAAdA,WAAc,CAAAD,CAAC;AAAA,SAAI,CAACA,CAAL;AAAA,CAArB;;AAEA,SAASD,SAAT,CAAmBD,CAAnB,EAAsB;AACpB,kBAAeA,CAAf;AACE,SAAK,WAAL;AACE,aAAOI,MAAP;;AACF,SAAK,UAAL;AACE,aAAOJ,CAAP;;AACF,SAAK,SAAL;AACE,aAAO;AAAA,eAAMA,CAAN;AAAA,OAAP;;AACF;AACEK,MAAAA,OAAO,CAACC,IAAR,CAAa,4BAA4BN,CAA5B,GAAgC,8BAA7C;AACA,aAAOO,OAAP;AATJ;AAWD;;AAED,IAAMH,MAAM,GAAG,SAATA,MAAS;AAAA,SAAM,IAAN;AAAA,CAAf;;AACA,IAAMG,OAAO,GAAG,SAAVA,OAAU;AAAA,SAAM,KAAN;AAAA,CAAhB","sourcesContent":["import { useState, useEffect, useRef, useMemo } from 'react';\nimport { Hookleton, createHookWithClass } from './index';\n\nexport default function createHook(useHook, ...initialArgs) {\n  //return createHookWithClass(Predicate, useHook, ...initialArgs);\n  const hook = new Predicate(useHook, initialArgs);\n  const useFn = hook.useFn.bind(hook);\n  useFn.get = hook._get.bind(hook);\n  return useFn;\n}\n\nexport function createHookWithPredicateCore(useHook, ...initialArgs) {\n  return createHookWithClass(PredicateCore, useHook, ...initialArgs);\n}\n\nexport class PredicateCore extends Hookleton {\n  useOnRest([arg1]) {\n    let predicate;\n    const hasSet = useRef(false);\n    useMemo(() => {\n      if (Array.isArray(arg1)) {\n        hasSet.current = true;\n        predicate = arg1[0];\n      } else {\n        predicate = arg1;\n      }\n    }, []);\n\n    const [, updater] = useState();\n\n    useEffect(() => {\n      this._saveUpdater(updater, predicate);\n      return () => this._updaters.delete(updater); // on unmount\n    }, []);\n\n    return hasSet.current\n      ? this._hookOut.concat({ setPredicate: this._setPredicate(updater) })\n      : this._hookOut;\n  }\n\n  _saveUpdater(updater, predicate) {\n    this._updaters.set(updater, withPredicate(updater, predicate));\n  }\n\n  _setPredicate(updater) {\n    return predicate => {\n      this._saveUpdater(updater, predicate);\n      this._updaters.get(updater)(this._hookOut[0]);\n    };\n  }\n}\n\nexport class Predicate extends PredicateCore {\n  useOnFirst(initial) {\n    return super.useOnFirst(initial).concat({ isFirst: true, setPredicate });\n  }\n\n  useOnRest(initial) {\n    let hookOut = super.useOnRest(initial);\n    const len = hookOut.length;\n    if (len === this.hookOut.length) {\n      hookOut = hookOut.concat({ isFirst: false, setPredicate });\n    } else {\n      hookOut[len - 1].isFirst = false;\n    }\n    return hookOut;\n  }\n}\n\nconst setPredicate = () => {};\n\n// Add 'predicate' function to updater\nfunction withPredicate(updater, p) {\n  const predicate = normalize(p);\n  return s => predicate(s) && updater(forceUpdate);\n}\n\nconst forceUpdate = s => ~s;\n\nfunction normalize(p) {\n  switch (typeof p) {\n    case 'undefined':\n      return TRUEFN;\n    case 'function':\n      return p;\n    case 'boolean':\n      return () => p;\n    default:\n      console.warn(\"[Hookleton] predicate '\" + p + \"' is not boolean or function\");\n      return FALSEFN;\n  }\n}\n\nconst TRUEFN = () => true;\nconst FALSEFN = () => false;\n"]},"metadata":{},"sourceType":"module"}