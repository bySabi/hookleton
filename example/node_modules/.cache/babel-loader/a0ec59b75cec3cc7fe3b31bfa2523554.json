{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/flx/Dropbox/Projects/hookleton/example/pages/context.js\";\nimport React from \"react\";\n// Context lets us pass a value deep into the component tree\n// without explicitly threading it through every component.\n// Create a context for the current theme (with \"light\" as the default).\nvar ThemeContext = React.createContext('light');\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App() {\n    _classCallCheck(this, App);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(App).apply(this, arguments));\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      // Use a Provider to pass the current theme to the tree below.\n      // Any component can read it, no matter how deep it is.\n      // In this example, we're passing \"dark\" as the current value.\n      return React.createElement(ThemeContext.Provider, {\n        value: \"dark\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14\n        },\n        __self: this\n      }, React.createElement(Toolbar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(React.Component); // A component in the middle doesn't have to\n// pass the theme down explicitly anymore.\n\n\nfunction Toolbar(props) {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(ThemedButton, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }));\n}\n\nvar ThemedButton =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(ThemedButton, _React$Component2);\n\n  function ThemedButton() {\n    _classCallCheck(this, ThemedButton);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ThemedButton).apply(this, arguments));\n  }\n\n  _createClass(ThemedButton, [{\n    key: \"render\",\n    // Assign a contextType to read the current theme context.\n    // React will find the closest theme Provider above and use its value.\n    // In this example, the current theme is \"dark\".\n    value: function render() {\n      return React.createElement(Button, {\n        theme: this.context,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return ThemedButton;\n}(React.Component);\n\n_defineProperty(ThemedButton, \"contextType\", ThemeContext);\n\nexport default App;","map":{"version":3,"sources":["/Users/flx/Dropbox/Projects/hookleton/example/pages/context.js"],"names":["ThemeContext","React","createContext","App","Component","Toolbar","props","ThemedButton","context"],"mappings":";;;;;;;;AAEA;AACA;AACA;AACA,IAAMA,YAAY,GAAGC,KAAK,CAACC,aAAN,CAAoB,OAApB,CAArB;;IAEMC,G;;;;;;;;;;;;;6BACK;AACP;AACA;AACA;AACA,aACE,oBAAC,YAAD,CAAc,QAAd;AAAuB,QAAA,KAAK,EAAC,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAKD;;;;EAVeF,KAAK,CAACG,S,GAaxB;AACA;;;AACA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACtB,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD;;IAEKC,Y;;;;;;;;;;;;;AACJ;AACA;AACA;6BAES;AACP,aAAO,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAE,KAAKC,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;;;EAPwBP,KAAK,CAACG,S;;gBAA3BG,Y,iBAIiBP,Y;;AAMvB,eAAeG,GAAf","sourcesContent":["\n\n// Context lets us pass a value deep into the component tree\n// without explicitly threading it through every component.\n// Create a context for the current theme (with \"light\" as the default).\nconst ThemeContext = React.createContext('light');\n\nclass App extends React.Component {\n  render() {\n    // Use a Provider to pass the current theme to the tree below.\n    // Any component can read it, no matter how deep it is.\n    // In this example, we're passing \"dark\" as the current value.\n    return (\n      <ThemeContext.Provider value=\"dark\">\n        <Toolbar />\n      </ThemeContext.Provider>\n    );\n  }\n}\n\n// A component in the middle doesn't have to\n// pass the theme down explicitly anymore.\nfunction Toolbar(props) {\n  return (\n    <div>\n      <ThemedButton />\n    </div>\n  );\n}\n\nclass ThemedButton extends React.Component {\n  // Assign a contextType to read the current theme context.\n  // React will find the closest theme Provider above and use its value.\n  // In this example, the current theme is \"dark\".\n  static contextType = ThemeContext;\n  render() {\n    return <Button theme={this.context} />;\n  }\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}