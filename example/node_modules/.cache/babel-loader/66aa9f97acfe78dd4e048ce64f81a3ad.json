{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nvar _set = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/set\"));\n\nvar __importDefault = void 0 && (void 0).__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = __importDefault(require(\"react\"));\n\nvar side_effect_1 = __importDefault(require(\"./side-effect\"));\n\nvar head_manager_context_1 = require(\"./head-manager-context\");\n\nfunction defaultHead() {\n  var className = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'next-head';\n  return [react_1.default.createElement(\"meta\", {\n    key: \"charSet\",\n    charSet: \"utf-8\",\n    className: className\n  })];\n}\n\nexports.defaultHead = defaultHead;\n\nfunction onlyReactElement(list, child) {\n  // React children can be \"string\" or \"number\" in this case we ignore them for backwards compat\n  if (typeof child === \"string\" || typeof child === \"number\") {\n    return list;\n  } // Adds support for React.Fragment\n\n\n  if (child.type === react_1.default.Fragment) {\n    return list.concat(react_1.default.Children.toArray(child.props.children).reduce(function (fragmentList, fragmentChild) {\n      if (typeof fragmentChild === \"string\" || typeof fragmentChild === \"number\") {\n        return fragmentList;\n      }\n\n      return fragmentList.concat(fragmentChild);\n    }, []));\n  }\n\n  return list.concat(child);\n}\n\nvar METATYPES = [\"name\", \"httpEquiv\", \"charSet\", \"itemProp\"];\n/*\n returns a function for filtering head child elements\n which shouldn't be duplicated, like <title/>\n Also adds support for deduplicated `key` properties\n*/\n\nfunction unique() {\n  var keys = new _set.default();\n  var tags = new _set.default();\n  var metaTypes = new _set.default();\n  var metaCategories = {};\n  return function (h) {\n    if (h.key && typeof h.key !== 'number' && h.key.indexOf(\".$\") === 0) {\n      if (keys.has(h.key)) return false;\n      keys.add(h.key);\n      return true;\n    }\n\n    switch (h.type) {\n      case \"title\":\n      case \"base\":\n        if (tags.has(h.type)) return false;\n        tags.add(h.type);\n        break;\n\n      case \"meta\":\n        for (var i = 0, len = METATYPES.length; i < len; i++) {\n          var metatype = METATYPES[i];\n          if (!h.props.hasOwnProperty(metatype)) continue;\n\n          if (metatype === \"charSet\") {\n            if (metaTypes.has(metatype)) return false;\n            metaTypes.add(metatype);\n          } else {\n            var category = h.props[metatype];\n            var categories = metaCategories[metatype] || new _set.default();\n            if (categories.has(category)) return false;\n            categories.add(category);\n            metaCategories[metatype] = categories;\n          }\n        }\n\n        break;\n    }\n\n    return true;\n  };\n}\n/**\n *\n * @param headElement List of multiple <Head> instances\n */\n\n\nfunction reduceComponents(headElements) {\n  return headElements.reduce(function (list, headElement) {\n    var headElementChildren = react_1.default.Children.toArray(headElement.props.children);\n    return list.concat(headElementChildren);\n  }, []).reduce(onlyReactElement, []).reverse().concat(defaultHead('')).filter(unique()).reverse().map(function (c, i) {\n    var className = (c.props && c.props.className ? c.props.className + \" \" : \"\") + \"next-head\";\n    var key = c.key || i;\n    return react_1.default.cloneElement(c, {\n      key: key,\n      className: className\n    });\n  });\n}\n\nvar Effect = side_effect_1.default();\n\nfunction Head(_ref) {\n  var children = _ref.children;\n  return react_1.default.createElement(head_manager_context_1.HeadManagerContext.Consumer, null, function (updateHead) {\n    return react_1.default.createElement(Effect, {\n      reduceComponentsToState: reduceComponents,\n      handleStateChange: updateHead\n    }, children);\n  });\n}\n\nHead.rewind = Effect.rewind;\nexports.default = Head;","map":null,"metadata":{},"sourceType":"script"}