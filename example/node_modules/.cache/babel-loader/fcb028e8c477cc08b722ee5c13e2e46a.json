{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _Array$from from \"@babel/runtime-corejs2/core-js/array/from\";\nimport _Map from \"@babel/runtime-corejs2/core-js/map\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport React from \"react\";\nimport { useState, useLayoutEffect } from 'react';\nimport { createHookWithClass, Hookleton } from 'hookleton';\n\nvar Hookleton2 =\n/*#__PURE__*/\nfunction (_Hookleton) {\n  _inherits(Hookleton2, _Hookleton);\n\n  function Hookleton2() {\n    _classCallCheck(this, Hookleton2);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Hookleton2).apply(this, arguments));\n  }\n\n  _createClass(Hookleton2, [{\n    key: \"useOnFirst\",\n    value: function useOnFirst() {\n      useLayoutEffect(this.__updateRest.bind(this), [this._hookOut[0]]);\n      return this._hookOut;\n    }\n  }]);\n\n  return Hookleton2;\n}(Hookleton);\n\nvar stores = new _Map();\n\nfunction createStore(store) {\n  for (var _len = arguments.length, initial = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    initial[_key - 1] = arguments[_key];\n  }\n\n  stores.set(store, createHookWithClass.apply(void 0, [Hookleton2, useState].concat(initial)));\n}\n\nfunction useStore(store) {\n  var hook = stores.get(store);\n\n  for (var _len2 = arguments.length, initial = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    initial[_key2 - 1] = arguments[_key2];\n  }\n\n  return hook && hook.apply(void 0, initial);\n}\n\nfunction getStore(store) {\n  var hook = stores.get(store);\n  return hook;\n}\n\ncreateStore('1', 0);\ncreateStore('2', 1);\ncreateStore('3', 2);\ncreateStore('4', 3);\ncreateStore('5', 4);\n\nvar Counters = function Counters() {\n  // 'tup' is tuple [count, setCount]\n  var tup1 = useStore('1');\n  var tup2 = useStore('2');\n  var tup3 = useStore('3');\n  var tup4 = useStore('4');\n  var tup5 = useStore('5');\n\n  var increment = function increment(set) {\n    return function (c) {\n      return set(function (c) {\n        return c + 1;\n      });\n    };\n  };\n\n  var decrement = function decrement(set) {\n    return function (c) {\n      return set(function (c) {\n        return c - 1;\n      });\n    };\n  };\n\n  var reset = function reset() {\n    return tup1[1](0), tup2[1](0), tup3[1](0), tup4[1](0), tup5[1](0);\n  };\n\n  return React.createElement(\"ul\", {\n    style: {\n      listStyle: 'none',\n      borderStyle: 'solid'\n    }\n  }, [tup1, tup2, tup3, tup4, tup5].map(function (tup, idx) {\n    return React.createElement(\"li\", {\n      key: idx\n    }, React.createElement(\"span\", null, tup[0]), React.createElement(\"button\", {\n      onClick: decrement(tup[1])\n    }, \"-\"), React.createElement(\"button\", {\n      onClick: increment(tup[1])\n    }, \"+\"), React.createElement(\"br\", null));\n  }), React.createElement(\"li\", null, React.createElement(\"button\", {\n    onClick: reset\n  }, \"reset\")));\n}; // put <Counters /> in a table of 1x10 cells\n\n\nvar TableCounters = function TableCounters() {\n  return React.createElement(\"table\", null, React.createElement(\"tbody\", null, React.createElement(\"tr\", null, _Array$from({\n    length: 10\n  }).map(function (_, idx) {\n    return React.createElement(\"td\", {\n      key: idx\n    }, React.createElement(Counters, null));\n  }))));\n}; // This component don't \"use\" the stores, will not rendered on changes,\n// destructured standalone setters will rerender components that \"use\" the stores.\n\n\nvar SetDefaults = function SetDefaults() {\n  var set = function set(store, value) {\n    var _getStore$get = getStore(store).get(),\n        _getStore$get2 = _slicedToArray(_getStore$get, 2),\n        set = _getStore$get2[1];\n\n    set(value);\n  };\n\n  return React.createElement(\"button\", {\n    onClick: function onClick() {\n      return set('1', 0), set('2', 1), set('3', 2), set('4', 3), set('5', 4);\n    }\n  }, \"SET defaults\");\n}; // Repeat `TableCounters` component 40 times\n\n\nexport default (function () {\n  return React.createElement(\"ul\", {\n    style: {\n      listStyle: 'none'\n    }\n  }, React.createElement(\"li\", null, React.createElement(SetDefaults, null)), _Array$from({\n    length: 40\n  }).map(function (_, idx) {\n    return React.createElement(\"li\", {\n      key: idx\n    }, React.createElement(TableCounters, null));\n  }));\n});","map":null,"metadata":{},"sourceType":"module"}