{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _Map from \"@babel/runtime-corejs2/core-js/map\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport { useEffect, useMemo, useRef, useState } from 'react';\nexport default function createHook(useHook) {\n  for (var _len = arguments.length, initialArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    initialArgs[_key - 1] = arguments[_key];\n  }\n\n  var hook = new Hookleton(useHook, initialArgs);\n  var useFn = hook.useFn.bind(hook);\n  useFn.get = hook._get.bind(hook);\n  return useFn;\n}\nexport var Hookleton =\n/*#__PURE__*/\nfunction () {\n  function Hookleton(useHook, initialArgs) {\n    _classCallCheck(this, Hookleton);\n\n    this.useHook = useHook;\n    this.args = initialArgs;\n    this.hookOut = [];\n    this._updaters = new _Map();\n  }\n\n  _createClass(Hookleton, [{\n    key: \"useFn\",\n    value: function useFn() {\n      var _this = this;\n\n      // First hook call become the 'hookleton'\n      var isFirst = useRef(false);\n      useMemo(function () {\n        return _this._onInit(isFirst);\n      }, []); // only one `useFn` instance will be true\n\n      for (var _len2 = arguments.length, initial = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        initial[_key2] = arguments[_key2];\n      }\n\n      if (isFirst.current) {\n        // Set shared `hook` output\n        this.hookOut = this.useHook.apply(this, _toConsumableArray(this.args)); // Checked at start on 'first' render\n\n        useMemo(function () {\n          if (!_Array$isArray(_this.hookOut)) {\n            throw new Error(\"[Hookleton] provided 'useHook' must return array values\");\n          }\n        }, []); // prevent Exception on 'hookleton' unmount\n        // by **CONVENTION** updater is `hookOut[1]\n\n        useEffect(function () {\n          return function () {\n            return _this.hookOut[1] = _this._unmountedFirst;\n          };\n        }, []); // Lifecycle hook: `on render first`\n\n        return this.useOnRenderFirst(initial);\n      } // Lifecycle hook: `on render the rest`\n\n\n      return this.useOnRenderRest(initial);\n    } // Here we use a custom function that ignore first render call.\n\n  }, {\n    key: \"useOnRenderFirst\",\n    value: function useOnRenderFirst() {\n      useEffect(this.__updateRest.bind(this), [this.hookOut[0]]);\n      return this.hookOut;\n    }\n  }, {\n    key: \"useOnRenderRest\",\n    value: function useOnRenderRest() {\n      var _this2 = this;\n\n      // Get 'updater' for, later, force render it.\n      // state is ignore because we have only one state set in 'hookleton'\n      var _useState = useState(),\n          _useState2 = _slicedToArray(_useState, 2),\n          updater = _useState2[1];\n\n      useEffect(function () {\n        // a Map of key/value: updater/updater is useful for some kinds of hooks\n        // composed on top of `useFn`\n        _this2._updaters.set(updater, wrapUpdater(updater));\n\n        return function () {\n          return _this2._updaters.delete(updater);\n        }; // on unmount\n      }, []);\n      return this.hookOut;\n    }\n  }, {\n    key: \"_onInit\",\n    value: function _onInit(ref) {\n      this._onInit = function () {};\n\n      ref.current = true;\n    }\n  }, {\n    key: \"_updateRest\",\n    value: function _updateRest() {\n      var _this3 = this;\n\n      // State, `hookOut[0]`, is passed to updater. This value is not use here,\n      // but could be useful for libs that extends Hookleton\n      this._updaters.forEach(function (updater) {\n        return updater(_this3.hookOut[0]);\n      });\n    }\n  }, {\n    key: \"__updateRest\",\n    value: function __updateRest() {\n      // skip first(unexpected) callback call\n      this.__updateRest = this._updateRest;\n    }\n  }, {\n    key: \"_get\",\n    value: function _get() {\n      return this.hookOut;\n    } // Prevent a Exception get throwed when someone is trying to update a unmounted 'hookleton',\n\n  }, {\n    key: \"_unmountedFirst\",\n    value: function _unmountedFirst() {\n      console.warn(\"[Hookleton] 'first' was unmounted\");\n    }\n  }]);\n\n  return Hookleton;\n}(); // Update negating '~' his current state. This force to rerender it\n\nvar wrapUpdater = function wrapUpdater(updater) {\n  return function () {\n    return updater(forceUpdate);\n  };\n};\n\nvar forceUpdate = function forceUpdate(s) {\n  return ~s;\n};","map":{"version":3,"sources":["/Users/flx/Dropbox/Projects/hookleton/example/component/index.js"],"names":["useEffect","useMemo","useRef","useState","createHook","useHook","initialArgs","hook","Hookleton","useFn","bind","get","_get","args","hookOut","_updaters","isFirst","_onInit","initial","current","Error","_unmountedFirst","useOnRenderFirst","useOnRenderRest","__updateRest","updater","set","wrapUpdater","delete","ref","forEach","_updateRest","console","warn","forceUpdate","s"],"mappings":"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","sourcesContent":["import { useEffect, useMemo, useRef, useState } from 'react';\n\nexport default function createHook(useHook, ...initialArgs) {\n  const hook = new Hookleton(useHook, initialArgs);\n  const useFn = hook.useFn.bind(hook);\n  useFn.get = hook._get.bind(hook);\n  return useFn;\n}\n\nexport class Hookleton {\n  constructor(useHook, initialArgs) {\n    this.useHook = useHook;\n    this.args = initialArgs;\n\n    this.hookOut = [];\n    this._updaters = new Map();\n  }\n\n  useFn(...initial) {\n    // First hook call become the 'hookleton'\n    const isFirst = useRef(false);\n    useMemo(() => this._onInit(isFirst), []); // only one `useFn` instance will be true\n\n    if (isFirst.current) {\n      // Set shared `hook` output\n      this.hookOut = this.useHook(...this.args);\n\n      // Checked at start on 'first' render\n      useMemo(() => {\n        if (!Array.isArray(this.hookOut)) {\n          throw new Error(\"[Hookleton] provided 'useHook' must return array values\");\n        }\n      }, []);\n\n      // prevent Exception on 'hookleton' unmount\n      // by **CONVENTION** updater is `hookOut[1]\n      useEffect(() => () => (this.hookOut[1] = this._unmountedFirst), []);\n\n      // Lifecycle hook: `on render first`\n      return this.useOnRenderFirst(initial);\n    }\n\n    // Lifecycle hook: `on render the rest`\n    return this.useOnRenderRest(initial);\n  }\n\n  // Here we use a custom function that ignore first render call.\n  useOnRenderFirst() {\n    useEffect(this.__updateRest.bind(this), [this.hookOut[0]]);\n    return this.hookOut;\n  }\n\n  useOnRenderRest() {\n    // Get 'updater' for, later, force render it.\n    // state is ignore because we have only one state set in 'hookleton'\n    const [, updater] = useState();\n\n    useEffect(() => {\n      // a Map of key/value: updater/updater is useful for some kinds of hooks\n      // composed on top of `useFn`\n      this._updaters.set(updater, wrapUpdater(updater));\n      return () => this._updaters.delete(updater); // on unmount\n    }, []);\n\n    return this.hookOut;\n  }\n\n  _onInit(ref) {\n    this._onInit = () => {};\n    ref.current = true;\n  }\n\n  _updateRest() {\n    // State, `hookOut[0]`, is passed to updater. This value is not use here,\n    // but could be useful for libs that extends Hookleton\n    this._updaters.forEach(updater => updater(this.hookOut[0]));\n  }\n\n  __updateRest() {\n    // skip first(unexpected) callback call\n    this.__updateRest = this._updateRest;\n  }\n\n  _get() {\n    return this.hookOut;\n  }\n\n  // Prevent a Exception get throwed when someone is trying to update a unmounted 'hookleton',\n  _unmountedFirst() {\n    console.warn(\"[Hookleton] 'first' was unmounted\");\n  }\n}\n\n// Update negating '~' his current state. This force to rerender it\nconst wrapUpdater = updater => () => updater(forceUpdate);\nconst forceUpdate = s => ~s;\n"]},"metadata":{},"sourceType":"module"}